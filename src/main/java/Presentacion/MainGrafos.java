package Presentacion;

import bo.edu.uagrm.ficct.inf310sb.grafos.Grafo;
import bo.edu.uagrm.ficct.inf310sb.grafos.excepciones.ExcepcionAristaYaExiste;
import bo.edu.uagrm.ficct.inf310sb.grafos.pesados.GrafoPesado;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class MainGrafos extends javax.swing.JFrame {

    private String accion;
    private GrafoPesado grafo;
    private int ciudadOrigen, ciudadDestino;
    private int VR[];

    public MainGrafos() {
        initComponents();
        grafo = new GrafoPesado();
        deshabilitarHabilitar(false);

        cbOrigen.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    String ciudadSeleccionadaAurita = e.getItem().toString();
                    //ciudadOrigen = ciudadSeleccionadaAurita;
                    ciudadOrigen = cbOrigen.getSelectedIndex();
//                    if (ciudadSeleccionadaAurita.equals(ciudadDestino)) {
                    if (ciudadOrigen == ciudadDestino) {
                        accion = "ERROR";
                    } else {
                        accion = "confirmarRuta";
                    }
                }
            }
        });
        cbDestino.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    String ciudadSeleccionadaAurita = e.getItem().toString();
                    //ciudadDestino = ciudadSeleccionadaAurita;
                    ciudadDestino = cbDestino.getSelectedIndex();
//                    if (ciudadSeleccionadaAurita.equals(ciudadOrigen)) {
                    if (ciudadDestino == ciudadOrigen) {
                        accion = "ERROR";
                    } else {
                        accion = "confirmarRuta";
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        areaDibujo = new java.awt.Panel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        cbOrigen = new javax.swing.JComboBox<>();
        cbDestino = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jtPrecio = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtDistancia = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        areaDibujo2 = new java.awt.Panel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        areaDibujo.setBackground(new java.awt.Color(204, 204, 204));
        areaDibujo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                areaDibujoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout areaDibujoLayout = new javax.swing.GroupLayout(areaDibujo);
        areaDibujo.setLayout(areaDibujoLayout);
        areaDibujoLayout.setHorizontalGroup(
            areaDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 523, Short.MAX_VALUE)
        );
        areaDibujoLayout.setVerticalGroup(
            areaDibujoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 347, Short.MAX_VALUE)
        );

        jButton1.setText("AÑADIR CIUDAD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("AÑADIR RUTA");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cbOrigen.setEnabled(false);

        cbDestino.setEnabled(false);

        jLabel1.setText("CIUDAD ORIGEN");

        jLabel2.setText("CIUDAD DESTINO");

        jLabel3.setText("PRECIO (Bs)");

        jtPrecio.setEnabled(false);

        jLabel4.setText("DISTANCIA (Km)");

        jtDistancia.setEnabled(false);

        jButton3.setText("GUARDAR RUTA");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("CALCULAR RUTAS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("DISTANCIA MAS CORTA");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("PRECIO MAS ECONOMICO");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("MOSTRAR"); // NOI18N
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("MOSTRAR"); // NOI18N
        jButton8.setEnabled(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout areaDibujo2Layout = new javax.swing.GroupLayout(areaDibujo2);
        areaDibujo2.setLayout(areaDibujo2Layout);
        areaDibujo2Layout.setHorizontalGroup(
            areaDibujo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 523, Short.MAX_VALUE)
        );
        areaDibujo2Layout.setVerticalGroup(
            areaDibujo2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 315, Short.MAX_VALUE)
        );

        jLabel6.setFont(new java.awt.Font("Sitka Banner", 1, 18)); // NOI18N
        jLabel6.setText("Su ruta mas corta aparecera aqui");

        jLabel7.setFont(new java.awt.Font("Sitka Banner", 1, 18)); // NOI18N
        jLabel7.setText("Añada su ciudad aqui ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(areaDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(145, 145, 145)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(272, 272, 272))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(cbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(93, 93, 93)
                                        .addComponent(jLabel4))
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(areaDibujo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(222, 222, 222)
                    .addComponent(jLabel7)
                    .addContainerGap(639, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(42, Short.MAX_VALUE)
                        .addComponent(areaDibujo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addGap(6, 6, 6)
                        .addComponent(areaDibujo2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton7)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jButton6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jtDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton8))))
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(146, 146, 146)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(jLabel7)
                    .addContainerGap(711, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void areaDibujoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaDibujoMouseClicked
        // CUANDO HAGA CLICK EN EL AREA DE DIBUJO
        if (accion.equals("nuevaCiudad")) {
            String nuevoNombreDeCiudad = input("Introducir nombre de Ciudad");
            if (!existeCiudadConEseNombre(nuevoNombreDeCiudad)) {
                if (nuevoNombreDeCiudad.length() > 0) {
                    int posX = evt.getX(), posY = evt.getY();
                    grafo.addVertice(nuevoNombreDeCiudad, posX, posY);
                    cbDestino.addItem(nuevoNombreDeCiudad);
                    cbOrigen.addItem(nuevoNombreDeCiudad);
                    actualizarVista();
                    //System.out.println(grafo.toString());
                } else {
                    show("Debe insertar un nombre");
                }
            } else {
                show("Ciudad ya Existe!");
            }
        }
        accion = "nada";
    }//GEN-LAST:event_areaDibujoMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // espera el click en el area de dibujo
        accion = "nuevaCiudad";
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // AÑADIR RUTA 
        if (grafo.cantidadDeVertices() <= 1) {
            show("No hay suficientes ciudades");
        } else {
            deshabilitarHabilitar(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (accion.equals("confirmarRuta")) {
/*            int U = grafo.getNumero(ciudadOrigen);
            int V = grafo.getNumero(ciudadDestino);*/
            int U = ciudadOrigen;
            int V = ciudadDestino;
            double kilometrosDeLaRuta = 0;
            double PrecioDeLaRuta = 0;
            //try {
                kilometrosDeLaRuta = Double.parseDouble(jtDistancia.getText());
                PrecioDeLaRuta = Double.parseDouble(jtPrecio.getText());
                if (U == -1 || V == -1) {
                    show("Ups!");
                } else {
                     
                    if (!existeMismaRutaConCostoDiferente(kilometrosDeLaRuta) || !existeMismaRutaConPrecioDiferente(PrecioDeLaRuta)) {
                        try {
                            //grafo.addArista(U, PrecioDeLaRuta, kilometrosDeLaRuta, V);
                            grafo.insertarArista(U, V, PrecioDeLaRuta);
                        } catch (ExcepcionAristaYaExiste ex) {
                            //Logger.getLogger(MainGrafos.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        deshabilitarHabilitar(false);                     
                        actualizarVista();
                        
                    } else {
                        show("Ya existe una ruta entre estas ciudades");
                    }
                   
                }
//            } catch (Exception e) {
//                show("Precio o kilometro Invalido! ");
//            }
        } else {
            show("Las Ciudades deben ser diferentes! ");
            accion = "nada";

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // carga las matrices y realiza el algoritmo de floyd
        System.err.println("1");
        grafo.caragarM1();
        System.err.println("2");
        grafo.caragarM3();
        System.err.println("3");
        grafo.floyd1();
        System.err.println("4");
        grafo.floyd3();
        System.err.println("5");
        jButton5.setEnabled(true);
        jButton6.setEnabled(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        cbOrigen.setEnabled(true);
        cbDestino.setEnabled(true);
        jButton7.setEnabled(true);


    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        cbOrigen.setEnabled(true);
        cbDestino.setEnabled(true);
        jButton8.setEnabled(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
/*        int U = grafo.getNumero(ciudadOrigen);
        int V = grafo.getNumero(ciudadDestino);*/
        int U = ciudadOrigen;
        int V = ciudadDestino;
        String s, p;
        if (grafo.existeAdyacencia(U, V)) {
/*            s = grafo.mostrarD(U, V);
            p = grafo.mostrarDR(U, V);
            show(s + p);*/
            cbOrigen.setEnabled(false);
            cbDestino.setEnabled(false);
            jButton7.setEnabled(false);

            //VR = grafo.mostrarDRV(U, V);
            List<Integer> aux = grafo.caminoMasCortoFloydWarshall(U, V);
            VR = new int[aux.size()];
           // System.err.println("Entrando al for");
           // System.err.println(VR.length);
            for (int i = 0; i < aux.size(); i++) {
                VR[i] = aux.get(i);
               // System.err.println("elemento: "+aux.get(i));
            } 
            mostrarRuta();
        } else {
            show("No se puede llegar");
            cbOrigen.setEnabled(false);
            cbDestino.setEnabled(false);
            jButton7.setEnabled(false);
        }

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
//        // TODO add your handling code here:
///*        int U = grafo.getNumero(ciudadOrigen);
//        int V = grafo.getNumero(ciudadDestino);*/
//        int U = ciudadOrigen;
//        int V = ciudadDestino;
//        String s, p;
//        if (grafo.existeAdyacencia(U, V)) {
///*            s = grafo.mostrarP(U, V);
//            p = grafo.mostrarPR(U, V);
//            show(s + " " + p);*/
//            cbOrigen.setEnabled(false);
//            cbDestino.setEnabled(false);
//            jButton8.setEnabled(false);
//
//            VR = grafo.mostrarPRV(U, V);
//            mostrarRuta();
//        } else {
//            show("No se puede llegar");
//            cbOrigen.setEnabled(false);
//            cbDestino.setEnabled(false);
//            jButton8.setEnabled(false);
//        }
    }//GEN-LAST:event_jButton8ActionPerformed
    //--------FUNCIONES Y PROCEDIMIENTOS PARA VALIDAR---
/*    private boolean existeMismaRutaConCostoDiferente(double kilometros) {
*//*        int posicionDeCiudadOrigen = grafo.getNumero(ciudadOrigen);
        int posicionDeCiudadDestino = grafo.getNumero(ciudadDestino);*//*
        int posicionDeCiudadOrigen = ciudadOrigen;
        int posicionDeCiudadDestino = ciudadDestino;
        if (grafo.posicionDeCiudadOrigen.existe(posicionDeCiudadDestino)) {
            for (int i = 0; i < grafo.V[posicionDeCiudadOrigen].length(); i++) {
                if (grafo.V[posicionDeCiudadOrigen].getDistancia(i + 1) == kilometros) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean existeMismaRutaConPrecioDiferente(double Precio) {
*//*        int posicionDeCiudadOrigen = grafo.getNumero(ciudadOrigen);
        int posicionDeCiudadDestino = grafo.getNumero(ciudadDestino);*//*
        int posicionDeCiudadOrigen = ciudadOrigen;
        int posicionDeCiudadDestino = ciudadDestino;
        if (grafo.V[posicionDeCiudadOrigen].existe(posicionDeCiudadDestino)) {
            for (int i = 0; i < grafo.V[posicionDeCiudadOrigen].length(); i++) {
                if (grafo.V[posicionDeCiudadOrigen].getPrecio(i + 1) == Precio) {
                    return true;
                }
            }
        }
        return false;
    }*/
    private boolean existeMismaRutaConCostoDiferente(double kilometros) {
/*        int posicionDeCiudadOrigen = grafo.getNumero(ciudadOrigen);
        int posicionDeCiudadDestino = grafo.getNumero(ciudadDestino);*/
        int posicionDeCiudadOrigen = ciudadOrigen;
        int posicionDeCiudadDestino = ciudadDestino;
/*        if (grafo.posicionDeCiudadOrigen.existe(posicionDeCiudadDestino)) {
            for (int i = 0; i < grafo.V[posicionDeCiudadOrigen].length(); i++) {
                if (grafo.V[posicionDeCiudadOrigen].getDistancia(i + 1) == kilometros) {
                    return true;
                }
            }
        }*/
        if (grafo.existeAdyacencia(posicionDeCiudadOrigen,posicionDeCiudadDestino)) {
            for (int i = 0; i < grafo.listaDeAyacencia().get(posicionDeCiudadOrigen).size(); i++) {
                if (grafo.listaDeAyacencia().get(i).get(posicionDeCiudadOrigen).getPeso() == kilometros) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean existeMismaRutaConPrecioDiferente(double Precio) {
/*        int posicionDeCiudadOrigen = grafo.getNumero(ciudadOrigen);
        int posicionDeCiudadDestino = grafo.getNumero(ciudadDestino);*/
        int posicionDeCiudadOrigen = ciudadOrigen;
        int posicionDeCiudadDestino = ciudadDestino;
/*        if (grafo.V[posicionDeCiudadOrigen].existe(posicionDeCiudadDestino)) {
            for (int i = 0; i < grafo.V[posicionDeCiudadOrigen].length(); i++) {
                if (grafo.V[posicionDeCiudadOrigen].getPrecio(i + 1) == Precio) {
                    return true;
                }
            }
        }
        return false;*/
        if (grafo.existeAdyacencia(posicionDeCiudadOrigen,posicionDeCiudadDestino)) {
            for (int i = 0; i < grafo.listaDeAyacencia().get(posicionDeCiudadOrigen).size(); i++) {
                if (grafo.listaDeAyacencia().get(i).get(posicionDeCiudadOrigen).getPeso() == Precio) {
                    return true;
                }
            }
        }
        return false;
    }
    //--------FUNCIONES Y PROCEDIMIENTOS AUXILIARES ---

    private void show(String mensaje) {
        //MOSTRAR UN MENSAJE
        JOptionPane.showMessageDialog(rootPane, mensaje);
    }

    private String input(String mensaje) {
        //DESPLEGA UN IMPUT BOX
        return JOptionPane.showInputDialog(rootPane, mensaje, "");
    }

    private boolean existeCiudadConEseNombre(String nombreAVerificar) {
        for (String nombre : grafo.nombres) {
            if (nombre != null) {
                if (nombre.equals(nombreAVerificar)) {
                    return true;
                }
            }
        }
        return false;
    }

    private void deshabilitarHabilitar(boolean b) {
        //DESABILITAR O HABILITAR 
        cbOrigen.setEnabled(b);
        cbDestino.setEnabled(b);
        jtPrecio.setEnabled(b);
        jtDistancia.setEnabled(b);
    }

    //---------FUNCIONES Y PROCEDIMIENTOS PARA GRAFICAR
    private void actualizarVista() {
        Graphics grafico = areaDibujo.getGraphics();
        grafico.setColor(Color.WHITE);
        grafico.fillRect(0, 0, areaDibujo.getWidth(), areaDibujo.getHeight());
        grafico.setColor(Color.BLACK);
        int ancho = 70;
        for (int i = 0; i < grafo.cantidadDeVertices(); i++) {
            grafico.drawOval(grafo.puntosX.get(i) - ancho / 2, grafo.puntosY.get(i) - ancho / 2, ancho, ancho);
            grafico.drawString(
                    grafo.nombres.get(i),
                    grafo.puntosX.get(i) - ancho / 2 + 5 * ((12 - grafo.nombres.get(i).length()) / 2),
                    grafo.puntosY.get(i) + 5
            );
/*            for (int j = 0; j < grafo.V[i].length(); j++) {
                int elemento = grafo.V[i].get(j);*/
            for (int j = 0; j < grafo.listaDeAyacencia().get(i).size(); j++) {
                //int elemento = grafo.listaDeAyacencia().get(i).get(j).getIndiceVertice();
                int elemento = j;
                grafico.drawLine(
                        grafo.puntosX.get(i),
                        grafo.puntosY.get(i),
/*                        grafo.puntosX[grafo.V[i].get(j)],
                        grafo.puntosY[grafo.V[i].get(j)]*/
                        grafo.puntosX.get(grafo.listaDeAyacencia().get(i).get(j).getIndiceVertice()),
                        grafo.puntosY.get(grafo.listaDeAyacencia().get(i).get(j).getIndiceVertice())
                );
                grafico.drawString(
                        //Double.toString(grafo.costo(i, elemento)) + " bs " + Double.toString(grafo.costo2(i, elemento)) + " km",
                        Double.toString(grafo.listaDeAyacencia().get(i).get(elemento).getPeso()) + " bs " + Double.toString(grafo.listaDeAyacencia().get(i).get(elemento).getPeso()) + " km",
//                        (grafo.puntosX.get(i) + grafo.puntosX[grafo.V[i].get(j)]) / 2,
//                        (grafo.puntosY.get(i) + grafo.puntosY[grafo.V[i].get(j)]) / 2
                        
                        (grafo.puntosX.get(i) + grafo.puntosX.get(grafo.listaDeAyacencia().get(i).get(j).getIndiceVertice())) / 2,
                        (grafo.puntosY.get(i) + grafo.puntosY.get(grafo.listaDeAyacencia().get(i).get(j).getIndiceVertice())) / 2
                );

            }
        }
    }

    private void mostrarRuta() {
        Graphics grafico = areaDibujo2.getGraphics();
        grafico.setColor(Color.WHITE);
        grafico.fillRect(0, 0, areaDibujo2.getWidth(), areaDibujo2.getHeight());
        grafico.setColor(Color.BLACK);
        int ancho = 70;
        System.err.println("VR :"+VR.length);
        for (int c = 0; c < VR.length; c++) {
            
            int i = VR[c];
            System.err.println("i: "+ i);
            grafico.drawOval(grafo.puntosX.get(i) - ancho / 2, grafo.puntosY.get(i) - ancho / 2, ancho, ancho);
            grafico.drawString(
                    grafo.nombres.get(i),
                    grafo.puntosX.get(i) - ancho / 2 + 5 * ((12 - grafo.nombres.get(i).length()) / 2),
                    grafo.puntosY.get(i) + 5
            );

            if (c < VR.length - 1) {
                int j = VR[c + 1];
                System.err.println("j: "+ j);
                grafico.drawLine(
                        grafo.puntosX.get(i),
                        grafo.puntosY.get(i),
                        grafo.puntosX.get(j),
                        grafo.puntosY.get(j)
                );
                grafico.drawString(
                        //Double.toString(grafo.costo(i, j)) + " bs " + Double.toString(grafo.costo2(i, j)) + " km",
                        //Double.toString(grafo.listaDeAyacencia().get(i).get(j).getPeso()) + " bs " + Double.toString(grafo.listaDeAyacencia().get(i).get(j).getPeso()) + " km",
                        Double.toString(grafo.getPeso(i, j)) + " bs " + Double.toString(grafo.getPeso(i, j)) + " km",
                        (grafo.puntosX.get(i) + grafo.puntosX.get(j)) / 2,
                        (grafo.puntosY.get(i) + grafo.puntosY.get(j)) / 2
                );
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGrafos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGrafos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGrafos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGrafos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGrafos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Panel areaDibujo;
    private java.awt.Panel areaDibujo2;
    private javax.swing.JComboBox<String> cbDestino;
    private javax.swing.JComboBox<String> cbOrigen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jtDistancia;
    private javax.swing.JTextField jtPrecio;
    // End of variables declaration//GEN-END:variables
}
